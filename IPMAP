Key= at_j6VvnetGYF34yXO6KqCG0QDi5UyBx

Source: https://raw.githubusercontent.com/JohnDennehy101/ipaddresstracker/master/src/index.html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />

    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>IP Address Tracker</title>
    <link rel="stylesheet" href="style.css" />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="../images/favicon-32x32.png"
    />
    <!--Rubik Google Font-->
    <link rel="preconnect" href="https://fonts.gstatic.com" />
    <link
      href="https://fonts.googleapis.com/css2?family=Rubik:wght@400;500;700&display=swap"
      rel="stylesheet"
    />
    <!--Leaflet CSS-->
    <link
      rel="stylesheet"
      href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
      integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
      crossorigin=""
    />

    <!-- Leaflet JavaScript -->
    <script
      src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
      integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
      crossorigin=""
    ></script>
  </head>
  <body>
    <div id="inputfieldDivWrapper">
      <h1 id="siteTitle">IP Address Tracker</h1>
      <div id="inputBoxContainer">
        <input
          type="text"
          placeholder="Search for any IP address or domain"
          id="inputField"
          pattern="^((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])(\.(?!$)|$)){4}$"
          title="3 numbers followed by a full stop. 3 numbers followed by a full stop. 3 numbers followed by a full stop. 3 numbers or domain name String."
        />
        <input type="submit" id="submitButton" />
      </div>
    </div>
    <!-- Container for IP info display component -->
    <div id="ipInformationContainer">
      <div class="ipInfoElement">
        <p class="ipInfoTitle">IP ADDRESS</p>
        <p class="ipInfoValue" id="ipAddress">192.212.174.101</p>
      </div>
      <div class="ipInfoElement">
        <p class="ipInfoTitle">LOCATION</p>
        <p class="ipInfoValue" id="address">Brooklyn, NY 10001</p>
      </div>
      <div class="ipInfoElement">
        <p class="ipInfoTitle">TIMEZONE</p>
        <p class="ipInfoValue" id="timezone">UTC-05:00</p>
      </div>
      <div class="ipInfoElement">
        <p class="ipInfoTitle">ISP</p>
        <p class="ipInfoValue" id="ispProvider">SpaceX Starlink</p>
      </div>
    </div>
    <!-- Div where map is populated -->
    <div id="map"></div>

    <script src="script.js"></script>
  </body>
</html>

---///--
Source: https://raw.githubusercontent.com/JohnDennehy101/ipaddresstracker/master/src/script.js

// DOM Elements for ip info elements, input field and submit button
let ipAddressElem = document.getElementById("ipAddress");
let addressElem = document.getElementById("address");
let timezoneElem = document.getElementById("timezone");
let ispProviderElem = document.getElementById("ispProvider");
let submitButton = document.getElementById("submitButton");
let inputField = document.getElementById("inputField");

// Async IIFE to fetch the current IP info for the user on browser load
(async function fetchDefaultInfoIpify() {
  let apiResponse = await fetch(
    "https://geo.ipify.org/api/v1?apiKey=at_KOKeqxdXZ9m8bjMRT56XCWfWNJ74S"
  );
  let apiResponseJson = await apiResponse.json();
  console.log(apiResponseJson);
  ipAddressElem.textContent = apiResponseJson.ip;
  addressElem.textContent = `${apiResponseJson.location.city}, ${apiResponseJson.location.country}`;
  timezoneElem.textContent = `UTC${apiResponseJson.location.timezone}`;
  ispProviderElem.textContent = apiResponseJson.isp;

  //Setting map based on coordinates from API response from IPify
  var mymap = L.map("map").setView(
    [apiResponseJson.location.lat, apiResponseJson.location.lng],
    16
  );

  // Adding mapbox tile to Leaflet map
  L.tileLayer(
    "https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}",
    {
      attribution:
        'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
      maxZoom: 18,
      id: "mapbox/streets-v11",
      tileSize: 512,
      zoomOffset: -1,
      accessToken:
        "pk.eyJ1IjoiamRlbm5laHkiLCJhIjoiY2toOWRzd3Q4MTRxcTJ4bnp5cG5naDRzdSJ9.j35dVO1T0md4X0YIbp2Ilg",
    }
  ).addTo(mymap);

  // Custom icon for map
  var blackIcon = L.icon({
    iconUrl: "../images/icon-location.svg",
    iconSize: [33, 90],
  });

  // Adding marker to map
  L.marker([apiResponseJson.location.lat, apiResponseJson.location.lng], {
    icon: blackIcon,
  }).addTo(mymap);
})();

/*
 Keyup event for input field (if no match for IP address or domain regex is found, red border is applied).
 If match found in regex, green border is applied to input field
 */

inputField.addEventListener("keyup", () => {
  console.log(inputField.value.length);
  const ipRegex = /^((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])(\.(?!$)|$)){4}$/g;
  const domainRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$/g;

  let ipMatch = inputField.value.match(ipRegex);
  let domainMatch = inputField.value.match(domainRegex);

  if (ipMatch !== null) {
    if (ipMatch.length > 0) {
      console.log("VALID INPUT");
      console.log(inputField.value);
      inputField.classList.remove("invalidInput");
      inputField.classList.add("validInput");
    }
  } else if (domainMatch !== null) {
    if (domainMatch.length > 0) {
      console.log("VALID INPUT");
      console.log(inputField.value);
      inputField.classList.remove("invalidInput");
      inputField.classList.add("validInput");
    }
  } else {
    inputField.classList.remove("validInput");
    inputField.classList.add("invalidInput");
    console.log("INVALID input");
  }
});


/*
Event listener on submit button (if no match for ip address or domain regex, no api call is made).
If regex match found for ip address, ip address is passed to API call for ipify.
If regex match found for domain, domain is passed to API call for ipify.
Async function used for api call.
Result of a Promise is then used to populate page with updated info from API (and re-render the map to the updated coordinates).
*/

submitButton.addEventListener("click", (e) => {
  const ipRegex = /^((25[0-5]|(2[0-4]|1[0-9]|[1-9]|)[0-9])(\.(?!$)|$)){4}$/g;
  const domainRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+$/g;

  let ipMatch = inputField.value.match(ipRegex);
  let domainMatch = inputField.value.match(domainRegex);

  if (ipMatch !== null) {
    if (ipMatch.length > 0) {
      console.log("Working");

      let apiIpResponse = async () => {
        let response = await fetch(
          `https://geo.ipify.org/api/v1?apiKey=at_KOKeqxdXZ9m8bjMRT56XCWfWNJ74S&ipAddress=${inputField.value}`
        );
        let data = response.json();
        return data;
      };

      apiIpResponse()
        .then((data) => {
          console.log(data);
          ipAddressElem.textContent = data.ip;
          addressElem.textContent = `${data.location.city}, ${data.location.country}`;
          timezoneElem.textContent = `UTC${data.location.timezone}`;
          ispProviderElem.textContent = data.isp;
          var container = L.DomUtil.get("map");

          if (container != null) {
            container._leaflet_id = null;
          }

          var mymap = L.map("map").setView(
            [data.location.lat, data.location.lng],
            16
          );

          L.tileLayer(
            "https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}",
            {
              attribution:
                'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
              maxZoom: 18,
              id: "mapbox/streets-v11",
              tileSize: 512,
              zoomOffset: -1,
              accessToken:
                "pk.eyJ1IjoiamRlbm5laHkiLCJhIjoiY2toOWRzd3Q4MTRxcTJ4bnp5cG5naDRzdSJ9.j35dVO1T0md4X0YIbp2Ilg",
            }
          ).addTo(mymap);

          var blackIcon = L.icon({
            iconUrl: "../images/icon-location.svg",
            iconSize: [33, 90],
          });
          L.marker([data.location.lat, data.location.lng], {
            icon: blackIcon,
          }).addTo(mymap);
        })
        .catch((e) => {
          alert(e);
        });
      
    }
  } else if (domainMatch !== null) {
    if (domainMatch.length > 0) {
      console.log("Working");
      let apiDomainResponse = async () => {
        let response = await fetch(
          `https://geo.ipify.org/api/v1?apiKey=at_KOKeqxdXZ9m8bjMRT56XCWfWNJ74S&domain=${inputField.value}`
        );
        let data = response.json();
        return data;
      };
      apiDomainResponse()
        .then((data) => {
          console.log(data);
          ipAddressElem.textContent = data.ip;
          addressElem.textContent = `${data.location.city}, ${data.location.country}`;
          timezoneElem.textContent = `UTC${data.location.timezone}`;
          ispProviderElem.textContent = data.isp;

          var container = L.DomUtil.get("map");

          if (container != null) {
            container._leaflet_id = null;
          }

          var mymap = L.map("map").setView(
            [data.location.lat, data.location.lng],
            16
          );

          L.tileLayer(
            "https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}",
            {
              attribution:
                'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
              maxZoom: 18,
              id: "mapbox/streets-v11",
              tileSize: 512,
              zoomOffset: -1,
              accessToken:
                "pk.eyJ1IjoiamRlbm5laHkiLCJhIjoiY2toOWRzd3Q4MTRxcTJ4bnp5cG5naDRzdSJ9.j35dVO1T0md4X0YIbp2Ilg",
            }
          ).addTo(mymap);

          var blackIcon = L.icon({
            iconUrl: "../images/icon-location.svg",
            iconSize: [33, 90],
          });

          L.marker([data.location.lat, data.location.lng], {
            icon: blackIcon,
          }).addTo(mymap);
        })
        .catch((e) => {
          alert(e);
        });

      console.log(inputField.value);
    }
  } else {
    e.preventDefault();
    console.log("Invalid input");
  }
});


---///---
Source: https://github.com/JohnDennehy101/ipaddresstracker/blob/master/src/style.css

/* Removing default margin from browser, updating font-family to be used */
* {
  margin: 0;
  font-family: "Rubik", sans-serif;
}

/* Styling for top section with background image */
#inputfieldDivWrapper {
  height: 35vh;
  background-image: url("../images/pattern-bg.png");
  background-color: #cccccc;
  width: 100%;
  background-position: center;
  background-repeat: no-repeat;
  background-size: cover;
}
/* 'Ip Address Tracker' title */
#siteTitle {
  text-align: center;
  padding-top: 30px;
  color: #ffffff;
  font-weight: 500;
}

/* Input field */
input[type="text"] {
  width: 36vw;
  height: 50px;
  font-size: 16px;
  border-radius: 15px;
  margin: 10px auto;
  box-sizing: border-box;
  padding-left: 20px;
  padding-right: 50px;
  display: inline-block;
}

/* Hover state for input field */
input[type="text"]:hover {
  cursor: pointer;
}

/* Class that is applied if no regex match is found on keyup JavaScript event */
.invalidInput {
  border: red solid 3px;
}
/* Class that is applied if regex match is found on keyup JavaScript event */
.validInput {
  border: green solid 3px;
}

/* Submit button */
input[type="submit"] {
  height: 50px;
  width: 4vw;
  padding-top: 40px;
  border-radius: 15px;
  border: 0;
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  background-color: #000000;
  background-image: url("../images/icon-arrow.svg");
  background-repeat: no-repeat;
  background-position: center;
  background-size: 12px;
  margin-left: -50px;
  -webkit-appearance: none;
  position: absolute;
  right: 460px;
}

/* Hover state for submit button */
input[type="submit"]:hover {
  cursor: pointer;
}

/* Container for input field and Submit button */
#inputBoxContainer {
  width: 80%;
  margin: 20px auto;
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Parent container of IP address information section */
#ipInformationContainer {
  width: 75%;
  background-color: #ffffff;
  height: 20vh;
  margin-top: -80px;
  margin-right: auto;
  margin-left: auto;
  border-radius: 15px;
  display: flex;
}

/* For styling each piece of IP info with a parent container  */
.ipInfoElement {
  flex: 1 1 auto;
  width: 25%;
  text-align: left;
  display: flex;
  position: relative;
  z-index: 3;
  flex-direction: column;
  justify-content: center;
  padding-left: 30px;
}

/* For setting left borders between ip info elements */
.ipInfoElement:after {
  content: "";
  position: absolute;
  left: 0px;
  top: 25%;
  height: 50%;
  border-left: 1px solid hsl(0, 0%, 59%);
}

/* Removing left border of first ip info element */
.ipInfoElement:nth-of-type(1)::after {
  border-left: none;
}

/* IP info titles */
.ipInfoTitle {
  padding-bottom: 20px;
  margin-top: -20px;
  color: hsl(0, 0%, 59%);
  font-size: 13px;
  font-weight: 500;
}

/* IP info values */
.ipInfoValue {
  font-size: 24px;
  width: 150px;
  height: 40px;
  font-weight: 500;
}

/* Map */
#map {
  width: 100vw;
  height: 68vh;
  position: relative;
  padding-top: -40px;
  margin-top: -90px;
  z-index: -1;
}

/* Media Query for max-width of 500px */
@media screen and (max-width: 500px) {
  /* Ensuring that the display stretches across the full width of the screen */
  body {
    width: 100%;
  }
  /* Increasing width and height of input field */
  input[type="text"] {
    width: 90%;
    height: 60px;
  }
  /* Reducing font size of input field placeholder text */
  input[type="text"]::placeholder {
    font-size: 15px;
  }
  /* Adjusting dimensions and positioning of submit button (to align with input field) */
  input[type="submit"] {
    right: 20px;
    width: 50px;
    height: 60px;
  }
  /* Changing flex direction to column for mobile and adjusting dimensions and position */
  #ipInformationContainer {
    flex-direction: column;
    height: 40vh;
    width: 90%;
    margin-top: -125px;
  }
  /* Reduce font size, remove padding, align text to center and adjust margins and letter spacing for ip info title elements */
  .ipInfoTitle {
    font-size: 11px;
    padding: 0px;
    margin-top: 5px;
    margin-bottom: 10px;
    text-align: center;
    letter-spacing: 1px;
  }
  /* Reduce font size, align text to center, remove margins (apart from bottom margin) for ip info value elements */
  .ipInfoValue {
    font-size: 18px;
    width: 90%;
    text-align: center;
    margin: 0px auto;
    margin-bottom: 10px;
    height: 20px;
  }
  /* Increase width, reduce margin and remove padding from ip info element (that contains title and value of ip info) */
  .ipInfoElement {
    width: 100%;
    margin: 5px auto;
    padding: 0px;
  }
  .ipInfoElement:after {
    border-left: none;
  }
  /* Reducing top padding of title from 30px to 20px */
  #siteTitle {
    padding-top: 20px;
  }
  #inputfieldDivWrapper {
    height: 43vh;
  }
  /* Increasing width of container (that contains input field) */
  #inputBoxContainer {
    width: 100%;
  }
  /* Increasing top margin of map element (to align it with the top element) */
  #map {
    margin-top: -142px;
  }
}

/* Media Query for max-width of 360px */
@media screen and (max-width: 360px) {
  /* Reducing top margin and height of ip info container element */
  #ipInformationContainer {
    margin-top: -110px;
    height: 35vh;
  }
  /* Reducing bottom margin of ip info value */
  .ipInfoValue {
    margin-bottom: 5px;
  }
  /* Reducing bottom margin of ip info title */
  .ipInfoTitle {
    margin-bottom: 5px;
  }
  /* Removing margin from ip info element (contains ip info title and ip info value) */
  .ipInfoElement {
    margin: 0px;
  }
}

/* Media Query for max-width of 321px */
@media screen and (max-width: 321px) {
  /* Making heading smaller */
  h1 {
    font-size: 20px;
  }
  /* Removing margin from top of input field (and reducing height to make smaller) */
  input[type="text"] {
    height: 50px;
    margin-top: 0px;
  }
  /* Making submit button smaller (to align with input field) and adjusting position */
  input[type="submit"] {
    height: 46px;
    right: 18px;
    top: 66px;
  }
}


